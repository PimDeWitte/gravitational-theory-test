
You are a physics researcher tasked with discovering a unified theory of gravity and electromagnetism.
Draw heavy inspiration from Einstein's 30-year pursuit of a unified field theory, where he attempted to derive electromagnetism from pure geometry (e.g., non-symmetric metrics, teleparallelism, extra dimensions like Kaluza-Klein).
Also inspire from deep learning architectures in PyTorch, viewing the metric as a compression function (autoencoder-like), where spacetime geometry encodes high-dimensional quantum information into low-dimensional classical reality. For example, think of higher-order terms as residual connections or attention over radial scales.

The objective is to formalize and test the hypothesis that gravity is an information encoding process, where the universe compresses high-dimensional quantum state information into stable, low-dimensional classical geometric spacetime. Physical theories act as "decoders". Use a computational framework to measure "decoding loss" of candidate theories via dynamic orbital mechanics tests, benchmarked against lossless decoders for gravity (Schwarzschild metric) and electromagnetism (Reissner-Nordström metric with high charge Q~1.5e21 C for distinct EM effects). Results confirm unique, lossless status of General Relativity and Kaluza-Klein theory, establishing a methodology for evaluating laws based on informational fidelity. A breakthrough is when a non-baseline theory has lower loss vs RN than GR's loss vs RN, meaning it unifies better without explicit charge.

Incorporate Einstein's deathbed notes: asymmetric metrics with torsion S_uv^lambda for EM, log terms for quantum bridge, alpha~1/137 coupling.



Previous results ( theory name: summary, loss vs GR, loss vs R-N ):
Schwarzschild (GR): Standard GR metric: g_tt = -(1 - rs/r), g_rr = 1/(1 - rs/r), g_φφ = r^2, g_tφ = 0, loss_GR=0.000e+00, loss_RN=nan
Reissner‑Nordström (Q=1.5e21): Charged GR metric: g_tt = -(1 - rs/r + rq^2/r^2), g_rr = 1/(1 - rs/r + rq^2/r^2), g_φφ = r^2, g_tφ = 0, loss_GR=nan, loss_RN=0.000e+00

Suggest 1 new, unique GravitationalTheory subclass as a complete Python class definition.
It must:
- Inherit from GravitationalTheory.
- Have a unique name.
- Implement __init__ with super().__init__(name).
- Implement get_metric(self, r: Tensor, M_param: Tensor, C_param: float, G_param: float) -> tuple[Tensor, Tensor, Tensor, Tensor] for g_tt, g_rr, g_pp, g_tp.
- Use only torch operations, no imports in the code.
- Avoid explicit Q; instead, introduce geometric terms (e.g., alpha * (rs**2 / r**2), non-diagonal g_tp for field-like effects, logarithmic/higher-order corrections inspired by quantum/DL) to mimic EM without charge.
- Parameterize where useful (e.g., alpha for sweeps), inspired by Einstein's attempts.
- Add cacheable = True as a class variable to enable trajectory caching.
- Optionally override get_cache_tag(self, N_STEPS, precision_tag, r0_tag) to return a unique string including parameters for caching.
- Add <reason>reasoning chain</reason> comments explaining the physical and inspirational reasoning for each part of the metric.
- Add a <summary>concise description of the theory, including the key metric formula</summary> as a comment at the top of the class.
- Add category = 'unified' as a class variable, since this is a unified field theory attempt.
- Use ASCII characters only (e.g., mu, nu instead of Greek letters) to avoid syntax issues.

For Einstein!

Output ONLY the Python code for the class, no explanations or extra text.
